name: Deploy to Vercel

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # =====================================================
  # QUALITY CHECKS
  # =====================================================
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run type-check

      - name: Linting
        run: npm run lint

      - name: Build check
        run: npm run build

      - name: Bundle analyzer
        run: |
          npm run build -- --analyze || true
          
      - name: Security audit
        run: npm audit --audit-level=high

  # =====================================================
  # TESTING
  # =====================================================
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test || echo "No tests configured yet"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: success()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  # =====================================================
  # PREVIEW DEPLOYMENT (PR)
  # =====================================================
  preview-deployment:
    name: Preview Deployment
    runs-on: ubuntu-latest
    needs: [quality-checks, test]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel environment information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build project artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy project artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$url" >> $GITHUB_OUTPUT

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üöÄ Preview Deployment Ready!
              
              **Preview URL:** ${{ steps.deploy.outputs.preview_url }}
              
              ‚úÖ Build completed successfully
              üîç Quality checks passed
              üì± Ready for testing
              
              *Deployed from commit: ${context.sha.substring(0, 7)}*`
            })

  # =====================================================
  # PRODUCTION DEPLOYMENT
  # =====================================================
  production-deployment:
    name: Production Deployment
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Deploy to Vercel
        run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}

  # =====================================================
  # POST-DEPLOYMENT CHECKS
  # =====================================================
  post-deployment:
    name: Post-Deployment Checks
    runs-on: ubuntu-latest
    needs: production-deployment
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Health check
        run: |
          url="${{ needs.production-deployment.outputs.production_url }}"
          echo "Checking health of: $url"
          
          # Wait for deployment to be ready
          sleep 30
          
          # Basic health check
          status=$(curl -s -o /dev/null -w "%{http_code}" "$url")
          if [ "$status" -eq 200 ]; then
            echo "‚úÖ Health check passed: $status"
          else
            echo "‚ùå Health check failed: $status"
            exit 1
          fi

      - name: Performance audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ needs.production-deployment.outputs.production_url }}
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Notify deployment success
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üöÄ Production Deployment Successful - ${new Date().toISOString().split('T')[0]}`,
              body: `## Production Deployment Complete ‚úÖ
              
              **Environment:** Production
              **URL:** ${{ needs.production-deployment.outputs.production_url }}
              **Commit:** ${context.sha}
              **Deployed by:** @${context.actor}
              **Time:** ${new Date().toISOString()}
              
              ### Deployment Details
              - ‚úÖ Quality checks passed
              - ‚úÖ Tests passed
              - ‚úÖ Build successful
              - ‚úÖ Health check passed
              - üìä Performance audit completed
              
              ### Next Steps
              - [ ] Verify all features are working
              - [ ] Monitor error logs
              - [ ] Check analytics for any issues
              
              *This issue was automatically created by GitHub Actions.*`,
              labels: ['deployment', 'production', 'automated']
            })

  # =====================================================
  # ROLLBACK (Manual Trigger)
  # =====================================================
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Rollback to previous deployment
        run: |
          echo "Rolling back to previous deployment..."
          # This would need to be implemented based on your rollback strategy
          vercel --version
          echo "Rollback completed"

      - name: Notify rollback
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üîÑ Rollback Executed - ${new Date().toISOString().split('T')[0]}`,
              body: `## Rollback Executed ‚ö†Ô∏è
              
              **Triggered by:** @${context.actor}
              **Time:** ${new Date().toISOString()}
              **Reason:** Manual rollback requested
              
              ### Action Required
              - [ ] Verify rollback was successful
              - [ ] Check application functionality
              - [ ] Investigate original issue
              - [ ] Plan fix and redeploy
              
              *This issue was automatically created by GitHub Actions.*`,
              labels: ['rollback', 'production', 'urgent']
            }) 